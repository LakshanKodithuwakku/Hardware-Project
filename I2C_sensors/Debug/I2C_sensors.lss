
I2C_sensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000882  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ba  00800060  00000882  00000916  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080011a  0080011a  000009d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018b3  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ed  00000000  00000000  00002407  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ce6  00000000  00000000  00002df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  00003adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000531  00000000  00000000  00003d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e62  00000000  00000000  00004279  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000050db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e8       	ldi	r30, 0x82	; 130
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 31       	cpi	r26, 0x1A	; 26
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	aa e1       	ldi	r26, 0x1A	; 26
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 31       	cpi	r26, 0x1F	; 31
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fd 02 	call	0x5fa	; 0x5fa <main>
  8a:	0c 94 3f 04 	jmp	0x87e	; 0x87e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_sendCommand>:
//=================================================================
// Turns OFF cursor
//=================================================================
void lcd_cursorOFF(void)	
{
	lcd_sendCommand(0x0C);
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	c8 2f       	mov	r28, r24
  98:	8e e4       	ldi	r24, 0x4E	; 78
  9a:	0e 94 8b 03 	call	0x716	; 0x716 <i2c_start>
  9e:	dc 2f       	mov	r29, r28
  a0:	d0 7f       	andi	r29, 0xF0	; 240
  a2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	8d 2b       	or	r24, r29
  aa:	0e 94 af 03 	call	0x75e	; 0x75e <i2c_write>
  ae:	8f ec       	ldi	r24, 0xCF	; 207
  b0:	97 e0       	ldi	r25, 0x07	; 7
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <lcd_sendCommand+0x20>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <lcd_sendCommand+0x26>
  b8:	00 00       	nop
  ba:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
  be:	8d 2b       	or	r24, r29
  c0:	0e 94 af 03 	call	0x75e	; 0x75e <i2c_write>
  c4:	8f ec       	ldi	r24, 0xCF	; 207
  c6:	97 e0       	ldi	r25, 0x07	; 7
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <lcd_sendCommand+0x36>
  cc:	00 c0       	rjmp	.+0      	; 0xce <lcd_sendCommand+0x3c>
  ce:	00 00       	nop
  d0:	90 e1       	ldi	r25, 0x10	; 16
  d2:	c9 9f       	mul	r28, r25
  d4:	e0 01       	movw	r28, r0
  d6:	11 24       	eor	r1, r1
  d8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	8c 2b       	or	r24, r28
  e0:	0e 94 af 03 	call	0x75e	; 0x75e <i2c_write>
  e4:	8f ec       	ldi	r24, 0xCF	; 207
  e6:	97 e0       	ldi	r25, 0x07	; 7
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcd_sendCommand+0x56>
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcd_sendCommand+0x5c>
  ee:	00 00       	nop
  f0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
  f4:	8c 2b       	or	r24, r28
  f6:	0e 94 af 03 	call	0x75e	; 0x75e <i2c_write>
  fa:	8f ec       	ldi	r24, 0xCF	; 207
  fc:	97 e0       	ldi	r25, 0x07	; 7
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <lcd_sendCommand+0x6c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <lcd_sendCommand+0x72>
 104:	00 00       	nop
 106:	0e 94 a9 03 	call	0x752	; 0x752 <i2c_stop>
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <lcd_sendData>:
 110:	cf 93       	push	r28
 112:	c8 2f       	mov	r28, r24
 114:	8e e4       	ldi	r24, 0x4E	; 78
 116:	0e 94 8b 03 	call	0x716	; 0x716 <i2c_start>
 11a:	c0 7f       	andi	r28, 0xF0	; 240
 11c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 120:	84 60       	ori	r24, 0x04	; 4
 122:	8c 2b       	or	r24, r28
 124:	0e 94 af 03 	call	0x75e	; 0x75e <i2c_write>
 128:	8f ec       	ldi	r24, 0xCF	; 207
 12a:	97 e0       	ldi	r25, 0x07	; 7
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_sendData+0x1c>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_sendData+0x22>
 132:	00 00       	nop
 134:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 138:	8c 2b       	or	r24, r28
 13a:	0e 94 af 03 	call	0x75e	; 0x75e <i2c_write>
 13e:	8f ec       	ldi	r24, 0xCF	; 207
 140:	97 e0       	ldi	r25, 0x07	; 7
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_sendData+0x32>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_sendData+0x38>
 148:	00 00       	nop
 14a:	0e 94 a9 03 	call	0x752	; 0x752 <i2c_stop>
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <lcd_init>:
 152:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 156:	80 e3       	ldi	r24, 0x30	; 48
 158:	0e 94 88 00 	call	0x110	; 0x110 <lcd_sendData>
 15c:	80 e3       	ldi	r24, 0x30	; 48
 15e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_sendData>
 162:	80 e3       	ldi	r24, 0x30	; 48
 164:	0e 94 88 00 	call	0x110	; 0x110 <lcd_sendData>
 168:	80 e2       	ldi	r24, 0x20	; 32
 16a:	0e 94 88 00 	call	0x110	; 0x110 <lcd_sendData>
 16e:	8f e3       	ldi	r24, 0x3F	; 63
 170:	9c e9       	ldi	r25, 0x9C	; 156
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_init+0x20>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_init+0x26>
 178:	00 00       	nop
 17a:	88 e2       	ldi	r24, 0x28	; 40
 17c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_sendCommand>
 180:	8c e0       	ldi	r24, 0x0C	; 12
 182:	0e 94 49 00 	call	0x92	; 0x92 <lcd_sendCommand>
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	0e 94 49 00 	call	0x92	; 0x92 <lcd_sendCommand>
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_sendCommand>
 192:	08 95       	ret

00000194 <lcd_putc>:
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	c8 2f       	mov	r28, r24
 19a:	8e e4       	ldi	r24, 0x4E	; 78
 19c:	0e 94 8b 03 	call	0x716	; 0x716 <i2c_start>
 1a0:	dc 2f       	mov	r29, r28
 1a2:	d0 7f       	andi	r29, 0xF0	; 240
 1a4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 1a8:	d8 2b       	or	r29, r24
 1aa:	8d 2f       	mov	r24, r29
 1ac:	85 60       	ori	r24, 0x05	; 5
 1ae:	0e 94 af 03 	call	0x75e	; 0x75e <i2c_write>
 1b2:	da 7f       	andi	r29, 0xFA	; 250
 1b4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 1b8:	8d 2b       	or	r24, r29
 1ba:	0e 94 af 03 	call	0x75e	; 0x75e <i2c_write>
 1be:	80 e1       	ldi	r24, 0x10	; 16
 1c0:	c8 9f       	mul	r28, r24
 1c2:	90 01       	movw	r18, r0
 1c4:	11 24       	eor	r1, r1
 1c6:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <__data_end>
 1ca:	c5 60       	ori	r28, 0x05	; 5
 1cc:	c2 2b       	or	r28, r18
 1ce:	8c 2f       	mov	r24, r28
 1d0:	0e 94 af 03 	call	0x75e	; 0x75e <i2c_write>
 1d4:	2c 2f       	mov	r18, r28
 1d6:	2a 7f       	andi	r18, 0xFA	; 250
 1d8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 1dc:	82 2b       	or	r24, r18
 1de:	0e 94 af 03 	call	0x75e	; 0x75e <i2c_write>
 1e2:	0e 94 a9 03 	call	0x752	; 0x752 <i2c_stop>
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <lcd_goto_xy>:
 1ec:	62 30       	cpi	r22, 0x02	; 2
 1ee:	31 f0       	breq	.+12     	; 0x1fc <lcd_goto_xy+0x10>
 1f0:	63 30       	cpi	r22, 0x03	; 3
 1f2:	31 f0       	breq	.+12     	; 0x200 <lcd_goto_xy+0x14>
 1f4:	61 30       	cpi	r22, 0x01	; 1
 1f6:	29 f4       	brne	.+10     	; 0x202 <lcd_goto_xy+0x16>
 1f8:	80 5c       	subi	r24, 0xC0	; 192
 1fa:	03 c0       	rjmp	.+6      	; 0x202 <lcd_goto_xy+0x16>
 1fc:	8c 5e       	subi	r24, 0xEC	; 236
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <lcd_goto_xy+0x16>
 200:	8c 5a       	subi	r24, 0xAC	; 172
 202:	80 68       	ori	r24, 0x80	; 128
 204:	0e 94 49 00 	call	0x92	; 0x92 <lcd_sendCommand>
 208:	08 95       	ret

0000020a <lcd_clear>:
//=================================================================
// Clears LCD
//=================================================================
void lcd_clear(void)				
{
	lcd_sendCommand(1<<LCD_CLR);
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_sendCommand>
 210:	08 95       	ret

00000212 <lcd_puts>:
}
//=================================================================
// Outputs string to LCD
//=================================================================
void lcd_puts(char* data)	
{
 212:	1f 93       	push	r17
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
	register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 218:	00 97       	sbiw	r24, 0x00	; 0
 21a:	b1 f0       	breq	.+44     	; 0x248 <lcd_puts+0x36>
 21c:	ec 01       	movw	r28, r24
 21e:	10 e0       	ldi	r17, 0x00	; 0
 220:	07 c0       	rjmp	.+14     	; 0x230 <lcd_puts+0x1e>

	// print data
	for(i=0; i<(strlen(data)); i++)
	{
		lcd_putc(data[i]);
 222:	fe 01       	movw	r30, r28
 224:	e2 0f       	add	r30, r18
 226:	f3 1f       	adc	r31, r19
 228:	80 81       	ld	r24, Z
 22a:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_putc>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<(strlen(data)); i++)
 22e:	1f 5f       	subi	r17, 0xFF	; 255
 230:	21 2f       	mov	r18, r17
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	fe 01       	movw	r30, r28
 236:	01 90       	ld	r0, Z+
 238:	00 20       	and	r0, r0
 23a:	e9 f7       	brne	.-6      	; 0x236 <lcd_puts+0x24>
 23c:	31 97       	sbiw	r30, 0x01	; 1
 23e:	ec 1b       	sub	r30, r28
 240:	fd 0b       	sbc	r31, r29
 242:	2e 17       	cp	r18, r30
 244:	3f 07       	cpc	r19, r31
 246:	68 f3       	brcs	.-38     	; 0x222 <lcd_puts+0x10>
	{
		lcd_putc(data[i]);
	}
}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	1f 91       	pop	r17
 24e:	08 95       	ret

00000250 <numberpressed>:



char numberpressed()
{
	PORTB = 0b10000000;
 250:	80 e8       	ldi	r24, 0x80	; 128
 252:	88 bb       	out	0x18, r24	; 24
	if(PINB & (1<<PB0))
 254:	b0 99       	sbic	0x16, 0	; 22
 256:	26 c0       	rjmp	.+76     	; 0x2a4 <numberpressed+0x54>
	{
		return 'a';
	}
	if(PINB & (1<<PB1))
 258:	b1 99       	sbic	0x16, 1	; 22
 25a:	26 c0       	rjmp	.+76     	; 0x2a8 <numberpressed+0x58>
	{
		return '3';
	}
	if(PINB & (1<<PB2))
 25c:	b2 99       	sbic	0x16, 2	; 22
 25e:	26 c0       	rjmp	.+76     	; 0x2ac <numberpressed+0x5c>
	{
		return '2';
	}
	if(PINB & (1<<PB3))
 260:	b3 99       	sbic	0x16, 3	; 22
 262:	26 c0       	rjmp	.+76     	; 0x2b0 <numberpressed+0x60>
	{
		return '1';
	}
	
	PORTB = 0b01000000;
 264:	80 e4       	ldi	r24, 0x40	; 64
 266:	88 bb       	out	0x18, r24	; 24
	if(PINB & (1<<PB0))
 268:	b0 99       	sbic	0x16, 0	; 22
 26a:	24 c0       	rjmp	.+72     	; 0x2b4 <numberpressed+0x64>
	{
		return 'b';
	}
	if(PINB & (1<<PB1))
 26c:	b1 99       	sbic	0x16, 1	; 22
 26e:	24 c0       	rjmp	.+72     	; 0x2b8 <numberpressed+0x68>
	{
		return '6';
	}
	if(PINB & (1<<PB2))
 270:	b2 99       	sbic	0x16, 2	; 22
 272:	24 c0       	rjmp	.+72     	; 0x2bc <numberpressed+0x6c>
	{
		return '5';
	}
	if(PINB & (1<<PB3))
 274:	b3 99       	sbic	0x16, 3	; 22
 276:	24 c0       	rjmp	.+72     	; 0x2c0 <numberpressed+0x70>
	{
		return '4';
	}
	PORTB = 0b00100000;
 278:	80 e2       	ldi	r24, 0x20	; 32
 27a:	88 bb       	out	0x18, r24	; 24
	if(PINB & (1<<PB0))
 27c:	b0 99       	sbic	0x16, 0	; 22
 27e:	22 c0       	rjmp	.+68     	; 0x2c4 <numberpressed+0x74>
	{ 
		return 'c';
	}
	if(PINB & (1<<PB1))
 280:	b1 99       	sbic	0x16, 1	; 22
 282:	22 c0       	rjmp	.+68     	; 0x2c8 <numberpressed+0x78>
	{
		return '9';
	}
	if(PINB & (1<<PB2))
 284:	b2 99       	sbic	0x16, 2	; 22
 286:	22 c0       	rjmp	.+68     	; 0x2cc <numberpressed+0x7c>
	{
		
		return '8';
	}
	if(PINB & (1<<PB3))
 288:	b3 99       	sbic	0x16, 3	; 22
 28a:	22 c0       	rjmp	.+68     	; 0x2d0 <numberpressed+0x80>
	{
		return '7';
	}
	PORTB = 0b00010000;
 28c:	80 e1       	ldi	r24, 0x10	; 16
 28e:	88 bb       	out	0x18, r24	; 24
	if(PINB & (1<<PB0))
 290:	b0 99       	sbic	0x16, 0	; 22
 292:	20 c0       	rjmp	.+64     	; 0x2d4 <numberpressed+0x84>
	{
		return 'd';
	}
	if(PINB & (1<<PB1))
 294:	b1 99       	sbic	0x16, 1	; 22
 296:	20 c0       	rjmp	.+64     	; 0x2d8 <numberpressed+0x88>
	{
		return '#';
	}
	if(PINB & (1<<PB2))
 298:	b2 99       	sbic	0x16, 2	; 22
 29a:	20 c0       	rjmp	.+64     	; 0x2dc <numberpressed+0x8c>
	{
		return '0';
	}
	if(PINB & (1<<PB3))
 29c:	b3 99       	sbic	0x16, 3	; 22
 29e:	20 c0       	rjmp	.+64     	; 0x2e0 <numberpressed+0x90>
	{
		return '*';
	}
	return 'N';
 2a0:	8e e4       	ldi	r24, 0x4E	; 78
 2a2:	08 95       	ret
char numberpressed()
{
	PORTB = 0b10000000;
	if(PINB & (1<<PB0))
	{
		return 'a';
 2a4:	81 e6       	ldi	r24, 0x61	; 97
 2a6:	08 95       	ret
	}
	if(PINB & (1<<PB1))
	{
		return '3';
 2a8:	83 e3       	ldi	r24, 0x33	; 51
 2aa:	08 95       	ret
	}
	if(PINB & (1<<PB2))
	{
		return '2';
 2ac:	82 e3       	ldi	r24, 0x32	; 50
 2ae:	08 95       	ret
	}
	if(PINB & (1<<PB3))
	{
		return '1';
 2b0:	81 e3       	ldi	r24, 0x31	; 49
 2b2:	08 95       	ret
	}
	
	PORTB = 0b01000000;
	if(PINB & (1<<PB0))
	{
		return 'b';
 2b4:	82 e6       	ldi	r24, 0x62	; 98
 2b6:	08 95       	ret
	}
	if(PINB & (1<<PB1))
	{
		return '6';
 2b8:	86 e3       	ldi	r24, 0x36	; 54
 2ba:	08 95       	ret
	}
	if(PINB & (1<<PB2))
	{
		return '5';
 2bc:	85 e3       	ldi	r24, 0x35	; 53
 2be:	08 95       	ret
	}
	if(PINB & (1<<PB3))
	{
		return '4';
 2c0:	84 e3       	ldi	r24, 0x34	; 52
 2c2:	08 95       	ret
	}
	PORTB = 0b00100000;
	if(PINB & (1<<PB0))
	{ 
		return 'c';
 2c4:	83 e6       	ldi	r24, 0x63	; 99
 2c6:	08 95       	ret
	}
	if(PINB & (1<<PB1))
	{
		return '9';
 2c8:	89 e3       	ldi	r24, 0x39	; 57
 2ca:	08 95       	ret
	}
	if(PINB & (1<<PB2))
	{
		
		return '8';
 2cc:	88 e3       	ldi	r24, 0x38	; 56
 2ce:	08 95       	ret
	}
	if(PINB & (1<<PB3))
	{
		return '7';
 2d0:	87 e3       	ldi	r24, 0x37	; 55
 2d2:	08 95       	ret
	}
	PORTB = 0b00010000;
	if(PINB & (1<<PB0))
	{
		return 'd';
 2d4:	84 e6       	ldi	r24, 0x64	; 100
 2d6:	08 95       	ret
	}
	if(PINB & (1<<PB1))
	{
		return '#';
 2d8:	83 e2       	ldi	r24, 0x23	; 35
 2da:	08 95       	ret
	}
	if(PINB & (1<<PB2))
	{
		return '0';
 2dc:	80 e3       	ldi	r24, 0x30	; 48
 2de:	08 95       	ret
	}
	if(PINB & (1<<PB3))
	{
		return '*';
 2e0:	8a e2       	ldi	r24, 0x2A	; 42
	}
	return 'N';
}
 2e2:	08 95       	ret

000002e4 <gettingOil>:
			_delay_ms(20);	
		}
		
}

void gettingOil(){
 2e4:	ef 92       	push	r14
 2e6:	ff 92       	push	r15
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
 2f2:	64 97       	sbiw	r28, 0x14	; 20
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	f8 94       	cli
 2f8:	de bf       	out	0x3e, r29	; 62
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	cd bf       	out	0x3d, r28	; 61
	char str[20];
	char c;
	int i = 0,num,j;
	int t;
	
	lcd_clear();
 2fe:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_clear>
	lcd_goto_xy(1,0);
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_goto_xy>
	lcd_puts(" Getting Oil");
 30a:	80 e6       	ldi	r24, 0x60	; 96
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 09 01 	call	0x212	; 0x212 <lcd_puts>
	lcd_goto_xy(1,1);
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_goto_xy>
	lcd_puts("Enter Volume");
 31a:	8d e6       	ldi	r24, 0x6D	; 109
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 09 01 	call	0x212	; 0x212 <lcd_puts>
	
	lcd_goto_xy(1,2);
 322:	62 e0       	ldi	r22, 0x02	; 2
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_goto_xy>

void gettingOil(){
	
	char str[20];
	char c;
	int i = 0,num,j;
 32a:	e1 2c       	mov	r14, r1
 32c:	f1 2c       	mov	r15, r1
	lcd_goto_xy(1,1);
	lcd_puts("Enter Volume");
	
	lcd_goto_xy(1,2);
	while(1){
		c = numberpressed();
 32e:	0e 94 28 01 	call	0x250	; 0x250 <numberpressed>
 332:	18 2f       	mov	r17, r24
		if(c == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9' || c == '0'){
 334:	80 ed       	ldi	r24, 0xD0	; 208
 336:	81 0f       	add	r24, r17
 338:	8a 30       	cpi	r24, 0x0A	; 10
 33a:	98 f4       	brcc	.+38     	; 0x362 <gettingOil+0x7e>
			lcd_goto_xy((1+i),2);
 33c:	62 e0       	ldi	r22, 0x02	; 2
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	8e 0d       	add	r24, r14
 342:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_goto_xy>
			lcd_putc(c);
 346:	81 2f       	mov	r24, r17
 348:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_putc>
			str[i] = c;
 34c:	e1 e0       	ldi	r30, 0x01	; 1
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	ec 0f       	add	r30, r28
 352:	fd 1f       	adc	r31, r29
 354:	ee 0d       	add	r30, r14
 356:	ff 1d       	adc	r31, r15
 358:	10 83       	st	Z, r17
			++i;
 35a:	2f ef       	ldi	r18, 0xFF	; 255
 35c:	e2 1a       	sub	r14, r18
 35e:	f2 0a       	sbc	r15, r18
 360:	22 c0       	rjmp	.+68     	; 0x3a6 <gettingOil+0xc2>
		}else if(c == '*'){
 362:	1a 32       	cpi	r17, 0x2A	; 42
 364:	01 f5       	brne	.+64     	; 0x3a6 <gettingOil+0xc2>
			num = atoi(str);
 366:	ce 01       	movw	r24, r28
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <atoi>
			PORTA = 0x02;
 36e:	22 e0       	ldi	r18, 0x02	; 2
 370:	2b bb       	out	0x1b, r18	; 27
			t = (int) num/31;
 372:	6f e1       	ldi	r22, 0x1F	; 31
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	0e 94 bc 03 	call	0x778	; 0x778 <__divmodhi4>
			for(j=0;j<t;j++){
 37a:	16 16       	cp	r1, r22
 37c:	17 06       	cpc	r1, r23
 37e:	7c f4       	brge	.+30     	; 0x39e <gettingOil+0xba>
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 384:	3f e3       	ldi	r19, 0x3F	; 63
 386:	4d e0       	ldi	r20, 0x0D	; 13
 388:	23 e0       	ldi	r18, 0x03	; 3
 38a:	31 50       	subi	r19, 0x01	; 1
 38c:	40 40       	sbci	r20, 0x00	; 0
 38e:	20 40       	sbci	r18, 0x00	; 0
 390:	e1 f7       	brne	.-8      	; 0x38a <gettingOil+0xa6>
 392:	00 c0       	rjmp	.+0      	; 0x394 <gettingOil+0xb0>
 394:	00 00       	nop
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	68 17       	cp	r22, r24
 39a:	79 07       	cpc	r23, r25
 39c:	99 f7       	brne	.-26     	; 0x384 <gettingOil+0xa0>
				_delay_ms(1000);
			}
			PORTA = 0x00;
 39e:	1b ba       	out	0x1b, r1	; 27
			break;
		}
		_delay_ms(20);
	}
	
	displayMenu();
 3a0:	0e 94 e6 01 	call	0x3cc	; 0x3cc <displayMenu>
	
}
 3a4:	07 c0       	rjmp	.+14     	; 0x3b4 <gettingOil+0xd0>
 3a6:	87 e8       	ldi	r24, 0x87	; 135
 3a8:	93 e1       	ldi	r25, 0x13	; 19
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <gettingOil+0xc6>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <gettingOil+0xcc>
 3b0:	00 00       	nop
 3b2:	bd cf       	rjmp	.-134    	; 0x32e <gettingOil+0x4a>
 3b4:	64 96       	adiw	r28, 0x14	; 20
 3b6:	0f b6       	in	r0, 0x3f	; 63
 3b8:	f8 94       	cli
 3ba:	de bf       	out	0x3e, r29	; 62
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	cd bf       	out	0x3d, r28	; 61
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	1f 91       	pop	r17
 3c6:	ff 90       	pop	r15
 3c8:	ef 90       	pop	r14
 3ca:	08 95       	ret

000003cc <displayMenu>:
	char c;
	int flag = 1;
	char *msg1 = "Select option and press B button";
	int l1 = strlen(msg1);
	int i=0,j;
	lcd_clear();
 3cc:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_clear>
	lcd_goto_xy(1,0);
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_goto_xy>
	lcd_puts(" C oil ");
 3d8:	8b e9       	ldi	r24, 0x9B	; 155
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 09 01 	call	0x212	; 0x212 <lcd_puts>
	lcd_goto_xy(1,1);
 3e0:	61 e0       	ldi	r22, 0x01	; 1
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_goto_xy>
	lcd_puts(" Dencity ");
 3e8:	83 ea       	ldi	r24, 0xA3	; 163
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 09 01 	call	0x212	; 0x212 <lcd_puts>
	lcd_goto_xy(-3,2);
 3f0:	62 e0       	ldi	r22, 0x02	; 2
 3f2:	8d ef       	ldi	r24, 0xFD	; 253
 3f4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_goto_xy>
	lcd_puts(" ________");
 3f8:	8d ea       	ldi	r24, 0xAD	; 173
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 09 01 	call	0x212	; 0x212 <lcd_puts>
	lcd_goto_xy(13,1);
 400:	61 e0       	ldi	r22, 0x01	; 1
 402:	8d e0       	ldi	r24, 0x0D	; 13
 404:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_goto_xy>
	lcd_putc('<');
 408:	8c e3       	ldi	r24, 0x3C	; 60
 40a:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_putc>
void displayMenu(){
	char c;
	int flag = 1;
	char *msg1 = "Select option and press B button";
	int l1 = strlen(msg1);
	int i=0,j;
 40e:	e1 2c       	mov	r14, r1
 410:	f1 2c       	mov	r15, r1
	
}

void displayMenu(){
	char c;
	int flag = 1;
 412:	cc 24       	eor	r12, r12
 414:	c3 94       	inc	r12
 416:	d1 2c       	mov	r13, r1
			lcd_goto_xy(13,1);
			lcd_putc('<');
			lcd_goto_xy(9,2);
			lcd_putc(' ');
			}else if(c == '8'){
			flag = 2;
 418:	68 94       	set
 41a:	99 24       	eor	r9, r9
 41c:	91 f8       	bld	r9, 1
 41e:	a1 2c       	mov	r10, r1
	lcd_putc('<');
	
	while(1){
		c = numberpressed();
		if(c == '2'){
			flag = 1;
 420:	bb 24       	eor	r11, r11
 422:	b3 94       	inc	r11
 424:	d0 e0       	ldi	r29, 0x00	; 0
	lcd_puts(" ________");
	lcd_goto_xy(13,1);
	lcd_putc('<');
	
	while(1){
		c = numberpressed();
 426:	0e 94 28 01 	call	0x250	; 0x250 <numberpressed>
		if(c == '2'){
 42a:	82 33       	cpi	r24, 0x32	; 50
 42c:	b9 f4       	brne	.+46     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
			flag = 1;
			lcd_goto_xy(13,1);
 42e:	61 e0       	ldi	r22, 0x01	; 1
 430:	8d e0       	ldi	r24, 0x0D	; 13
 432:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_goto_xy>
			lcd_putc('<');
 436:	8c e3       	ldi	r24, 0x3C	; 60
 438:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_putc>
			lcd_goto_xy(9,2);
 43c:	62 e0       	ldi	r22, 0x02	; 2
 43e:	89 e0       	ldi	r24, 0x09	; 9
 440:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_goto_xy>
			lcd_putc(' ');
 444:	80 e2       	ldi	r24, 0x20	; 32
 446:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_putc>
				}else if(flag == 2){
					gettingOil();
				}
			}
		
		if((i + 16) < l1){
 44a:	c7 01       	movw	r24, r14
 44c:	40 96       	adiw	r24, 0x10	; 16
 44e:	80 97       	sbiw	r24, 0x20	; 32
 450:	4c f1       	brlt	.+82     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
	lcd_putc('<');
	
	while(1){
		c = numberpressed();
		if(c == '2'){
			flag = 1;
 452:	cb 2c       	mov	r12, r11
 454:	dd 2e       	mov	r13, r29
				lcd_goto_xy(j-4,3);
				lcd_putc(msg1[j+i]);
			}
			++i;
			}else{
			i = 0;
 456:	e1 2c       	mov	r14, r1
 458:	f1 2c       	mov	r15, r1
 45a:	39 c0       	rjmp	.+114    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
			flag = 1;
			lcd_goto_xy(13,1);
			lcd_putc('<');
			lcd_goto_xy(9,2);
			lcd_putc(' ');
			}else if(c == '8'){
 45c:	88 33       	cpi	r24, 0x38	; 56
 45e:	89 f4       	brne	.+34     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			flag = 2;
			lcd_goto_xy(9,2);
 460:	62 e0       	ldi	r22, 0x02	; 2
 462:	89 e0       	ldi	r24, 0x09	; 9
 464:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_goto_xy>
			lcd_putc('<');
 468:	8c e3       	ldi	r24, 0x3C	; 60
 46a:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_putc>
			lcd_goto_xy(13,1);
 46e:	61 e0       	ldi	r22, 0x01	; 1
 470:	8d e0       	ldi	r24, 0x0D	; 13
 472:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_goto_xy>
			lcd_putc(' ');
 476:	80 e2       	ldi	r24, 0x20	; 32
 478:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_putc>
			lcd_goto_xy(13,1);
			lcd_putc('<');
			lcd_goto_xy(9,2);
			lcd_putc(' ');
			}else if(c == '8'){
			flag = 2;
 47c:	c9 2c       	mov	r12, r9
 47e:	da 2c       	mov	r13, r10
 480:	2d c0       	rjmp	.+90     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
			lcd_goto_xy(9,2);
			lcd_putc('<');
			lcd_goto_xy(13,1);
			lcd_putc(' ');
			}else if(c == '*'){
 482:	8a 32       	cpi	r24, 0x2A	; 42
 484:	59 f5       	brne	.+86     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
				if(flag == 1){
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	c8 16       	cp	r12, r24
 48a:	d1 04       	cpc	r13, r1
 48c:	21 f4       	brne	.+8      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
					lcd_clear();
 48e:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_clear>
					oilVolume();
 492:	0e 94 75 02 	call	0x4ea	; 0x4ea <oilVolume>
				}else if(flag == 2){
 496:	92 e0       	ldi	r25, 0x02	; 2
 498:	c9 16       	cp	r12, r25
 49a:	d1 04       	cpc	r13, r1
 49c:	f9 f4       	brne	.+62     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
					gettingOil();
 49e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <gettingOil>
 4a2:	1c c0       	rjmp	.+56     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
	lcd_putc('<');
	
	while(1){
		c = numberpressed();
		if(c == '2'){
			flag = 1;
 4a4:	cb 2c       	mov	r12, r11
 4a6:	dd 2e       	mov	r13, r29
 4a8:	87 01       	movw	r16, r14
 4aa:	06 58       	subi	r16, 0x86	; 134
 4ac:	1f 4f       	sbci	r17, 0xFF	; 255
 4ae:	cc ef       	ldi	r28, 0xFC	; 252
				}
			}
		
		if((i + 16) < l1){
			for(j=0;j<16;j++){
				lcd_goto_xy(j-4,3);
 4b0:	63 e0       	ldi	r22, 0x03	; 3
 4b2:	8c 2f       	mov	r24, r28
 4b4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_goto_xy>
				lcd_putc(msg1[j+i]);
 4b8:	f8 01       	movw	r30, r16
 4ba:	81 91       	ld	r24, Z+
 4bc:	8f 01       	movw	r16, r30
 4be:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_putc>
 4c2:	cf 5f       	subi	r28, 0xFF	; 255
					gettingOil();
				}
			}
		
		if((i + 16) < l1){
			for(j=0;j<16;j++){
 4c4:	cc 30       	cpi	r28, 0x0C	; 12
 4c6:	a1 f7       	brne	.-24     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
				lcd_goto_xy(j-4,3);
				lcd_putc(msg1[j+i]);
			}
			++i;
 4c8:	ff ef       	ldi	r31, 0xFF	; 255
 4ca:	ef 1a       	sub	r14, r31
 4cc:	ff 0a       	sbc	r15, r31
 4ce:	87 e8       	ldi	r24, 0x87	; 135
 4d0:	93 e1       	ldi	r25, 0x13	; 19
 4d2:	01 97       	sbiw	r24, 0x01	; 1
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4d8:	00 00       	nop
 4da:	a5 cf       	rjmp	.-182    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
				}else if(flag == 2){
					gettingOil();
				}
			}
		
		if((i + 16) < l1){
 4dc:	c7 01       	movw	r24, r14
 4de:	40 96       	adiw	r24, 0x10	; 16
 4e0:	80 97       	sbiw	r24, 0x20	; 32
 4e2:	14 f3       	brlt	.-60     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
				lcd_goto_xy(j-4,3);
				lcd_putc(msg1[j+i]);
			}
			++i;
			}else{
			i = 0;
 4e4:	e1 2c       	mov	r14, r1
 4e6:	f1 2c       	mov	r15, r1
 4e8:	f2 cf       	rjmp	.-28     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>

000004ea <oilVolume>:
		}
		_delay_ms(20);
	}
}

void oilVolume(){
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	cd b7       	in	r28, 0x3d	; 61
 4f0:	de b7       	in	r29, 0x3e	; 62
 4f2:	60 97       	sbiw	r28, 0x10	; 16
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	f8 94       	cli
 4f8:	de bf       	out	0x3e, r29	; 62
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	cd bf       	out	0x3d, r28	; 61
			char show_a[16];
			int16_t count_a = 0;
			char c;
			char *str = "Press Stop button to Back";
			int l = strlen(str);
			int i = 0,j;
 4fe:	e1 2c       	mov	r14, r1
 500:	f1 2c       	mov	r15, r1
			}
			
			PORTD |= 1<<PIND0;
			_delay_us(50);
			PORTD &= ~(1<<PIND0);
			count_a = pulse/58;
 502:	0f 2e       	mov	r0, r31
 504:	fa e3       	ldi	r31, 0x3A	; 58
 506:	8f 2e       	mov	r8, r31
 508:	91 2c       	mov	r9, r1
 50a:	f0 2d       	mov	r31, r0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 50c:	0f 2e       	mov	r0, r31
 50e:	f4 e2       	ldi	r31, 0x24	; 36
 510:	af 2e       	mov	r10, r31
 512:	b1 2c       	mov	r11, r1
 514:	f0 2d       	mov	r31, r0
 516:	0f 2e       	mov	r0, r31
 518:	f8 e5       	ldi	r31, 0x58	; 88
 51a:	cf 2e       	mov	r12, r31
 51c:	f2 e0       	ldi	r31, 0x02	; 2
 51e:	df 2e       	mov	r13, r31
 520:	f0 2d       	mov	r31, r0
 522:	02 c0       	rjmp	.+4      	; 0x528 <oilVolume+0x3e>
					lcd_goto_xy(j-3,3);
					lcd_putc(str[j+i]);
				}
				++i;
				}else{
				i = 0;
 524:	e1 2c       	mov	r14, r1
 526:	f1 2c       	mov	r15, r1
			int i = 0,j;
			
			
			while(1){
			
			c = numberpressed();
 528:	0e 94 28 01 	call	0x250	; 0x250 <numberpressed>
			
			if(c == '#'){
 52c:	83 32       	cpi	r24, 0x23	; 35
 52e:	11 f4       	brne	.+4      	; 0x534 <oilVolume+0x4a>
				displayMenu();
 530:	0e 94 e6 01 	call	0x3cc	; 0x3cc <displayMenu>
			}
			
			PORTD |= 1<<PIND0;
 534:	90 9a       	sbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 536:	20 e1       	ldi	r18, 0x10	; 16
 538:	2a 95       	dec	r18
 53a:	f1 f7       	brne	.-4      	; 0x538 <oilVolume+0x4e>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <oilVolume+0x54>
			_delay_us(50);
			PORTD &= ~(1<<PIND0);
 53e:	90 98       	cbi	0x12, 0	; 18
			count_a = pulse/58;
 540:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <pulse>
 544:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <pulse+0x1>
 548:	b4 01       	movw	r22, r8
 54a:	0e 94 bc 03 	call	0x778	; 0x778 <__divmodhi4>
 54e:	8b 01       	movw	r16, r22
 550:	4a e0       	ldi	r20, 0x0A	; 10
 552:	be 01       	movw	r22, r28
 554:	6f 5f       	subi	r22, 0xFF	; 255
 556:	7f 4f       	sbci	r23, 0xFF	; 255
 558:	c8 01       	movw	r24, r16
 55a:	0e 94 02 04 	call	0x804	; 0x804 <__itoa_ncheck>
			
			itoa(count_a,show_a,10);
			
			lcd_goto_xy(1,0);
 55e:	60 e0       	ldi	r22, 0x00	; 0
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_goto_xy>
			lcd_puts("oil volume");
 566:	81 ed       	ldi	r24, 0xD1	; 209
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 09 01 	call	0x212	; 0x212 <lcd_puts>
			lcd_goto_xy(4,1);
 56e:	61 e0       	ldi	r22, 0x01	; 1
 570:	84 e0       	ldi	r24, 0x04	; 4
 572:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_goto_xy>
 576:	c5 01       	movw	r24, r10
 578:	80 1b       	sub	r24, r16
 57a:	91 0b       	sbc	r25, r17
 57c:	4a e0       	ldi	r20, 0x0A	; 10
 57e:	be 01       	movw	r22, r28
 580:	6f 5f       	subi	r22, 0xFF	; 255
 582:	7f 4f       	sbci	r23, 0xFF	; 255
 584:	fc 01       	movw	r30, r24
 586:	ec 9d       	mul	r30, r12
 588:	c0 01       	movw	r24, r0
 58a:	ed 9d       	mul	r30, r13
 58c:	90 0d       	add	r25, r0
 58e:	fc 9d       	mul	r31, r12
 590:	90 0d       	add	r25, r0
 592:	11 24       	eor	r1, r1
 594:	0e 94 02 04 	call	0x804	; 0x804 <__itoa_ncheck>
			itoa((36-count_a)*600,show_a,10);//r=14cm
			lcd_puts(show_a);
 598:	ce 01       	movw	r24, r28
 59a:	01 96       	adiw	r24, 0x01	; 1
 59c:	0e 94 09 01 	call	0x212	; 0x212 <lcd_puts>
			lcd_puts(" ");
 5a0:	81 ea       	ldi	r24, 0xA1	; 161
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	0e 94 09 01 	call	0x212	; 0x212 <lcd_puts>
			lcd_goto_xy(10,1);
 5a8:	61 e0       	ldi	r22, 0x01	; 1
 5aa:	8a e0       	ldi	r24, 0x0A	; 10
 5ac:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_goto_xy>
			lcd_puts("ml");
 5b0:	8c ed       	ldi	r24, 0xDC	; 220
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 09 01 	call	0x212	; 0x212 <lcd_puts>
			lcd_goto_xy(1,1);
 5b8:	61 e0       	ldi	r22, 0x01	; 1
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_goto_xy>
			
			if((i + 16) < l){
 5c0:	c7 01       	movw	r24, r14
 5c2:	40 96       	adiw	r24, 0x10	; 16
 5c4:	49 97       	sbiw	r24, 0x19	; 25
 5c6:	0c f0       	brlt	.+2      	; 0x5ca <oilVolume+0xe0>
 5c8:	ad cf       	rjmp	.-166    	; 0x524 <oilVolume+0x3a>
 5ca:	87 01       	movw	r16, r14
 5cc:	09 54       	subi	r16, 0x49	; 73
 5ce:	1f 4f       	sbci	r17, 0xFF	; 255
 5d0:	0f 2e       	mov	r0, r31
 5d2:	fd ef       	ldi	r31, 0xFD	; 253
 5d4:	7f 2e       	mov	r7, r31
 5d6:	f0 2d       	mov	r31, r0
				for(j=0;j<16;j++){
					lcd_goto_xy(j-3,3);
 5d8:	63 e0       	ldi	r22, 0x03	; 3
 5da:	87 2d       	mov	r24, r7
 5dc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_goto_xy>
					lcd_putc(str[j+i]);
 5e0:	f8 01       	movw	r30, r16
 5e2:	81 91       	ld	r24, Z+
 5e4:	8f 01       	movw	r16, r30
 5e6:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_putc>
 5ea:	73 94       	inc	r7
			lcd_goto_xy(10,1);
			lcd_puts("ml");
			lcd_goto_xy(1,1);
			
			if((i + 16) < l){
				for(j=0;j<16;j++){
 5ec:	fd e0       	ldi	r31, 0x0D	; 13
 5ee:	7f 12       	cpse	r7, r31
 5f0:	f3 cf       	rjmp	.-26     	; 0x5d8 <oilVolume+0xee>
					lcd_goto_xy(j-3,3);
					lcd_putc(str[j+i]);
				}
				++i;
 5f2:	2f ef       	ldi	r18, 0xFF	; 255
 5f4:	e2 1a       	sub	r14, r18
 5f6:	f2 0a       	sbc	r15, r18
 5f8:	97 cf       	rjmp	.-210    	; 0x528 <oilVolume+0x3e>

000005fa <main>:
void select();


int main(void)
{
		DDRB = 0xF0;
 5fa:	c0 ef       	ldi	r28, 0xF0	; 240
 5fc:	c7 bb       	out	0x17, r28	; 23
		DDRA = 0xFF;
 5fe:	8f ef       	ldi	r24, 0xFF	; 255
 600:	8a bb       	out	0x1a, r24	; 26
		PORTA = 0xFF;
 602:	8b bb       	out	0x1b, r24	; 27
		int p = 0,q;
		char *msg = "Smart Oil supplier";
		
		int l = strlen(msg);
		
		lcd_init(LCD_BACKLIGHT_ON);
 604:	88 e0       	ldi	r24, 0x08	; 8
 606:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_init>
		DDRD = 0b11110011;
 60a:	83 ef       	ldi	r24, 0xF3	; 243
 60c:	81 bb       	out	0x11, r24	; 17
		
		PORTA=0xF0;
 60e:	cb bb       	out	0x1b, r28	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 610:	83 ed       	ldi	r24, 0xD3	; 211
 612:	90 e3       	ldi	r25, 0x30	; 48
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <main+0x1a>
 618:	00 c0       	rjmp	.+0      	; 0x61a <main+0x20>
 61a:	00 00       	nop
		_delay_ms(50);

		lcd_init(LCD_BACKLIGHT_ON);
 61c:	88 e0       	ldi	r24, 0x08	; 8
 61e:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_init>

		GICR |= 1<<INT0;
 622:	8b b7       	in	r24, 0x3b	; 59
 624:	80 64       	ori	r24, 0x40	; 64
 626:	8b bf       	out	0x3b, r24	; 59
		MCUCR |= 1<<ISC00; 
 628:	85 b7       	in	r24, 0x35	; 53
 62a:	81 60       	ori	r24, 0x01	; 1
 62c:	85 bf       	out	0x35, r24	; 53
	
		sei();
 62e:	78 94       	sei
		
		lcd_clear();
 630:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_clear>
		lcd_goto_xy(2,0);
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	82 e0       	ldi	r24, 0x02	; 2
 638:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_goto_xy>
		lcd_puts("  Welcome");
 63c:	82 ef       	ldi	r24, 0xF2	; 242
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	0e 94 09 01 	call	0x212	; 0x212 <lcd_puts>
		lcd_goto_xy(-1,2);
 644:	62 e0       	ldi	r22, 0x02	; 2
 646:	8f ef       	ldi	r24, 0xFF	; 255
 648:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_goto_xy>
		lcd_puts("Group No.04");
 64c:	8c ef       	ldi	r24, 0xFC	; 252
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	0e 94 09 01 	call	0x212	; 0x212 <lcd_puts>
		lcd_goto_xy(-4,3);
 654:	63 e0       	ldi	r22, 0x03	; 3
 656:	8c ef       	ldi	r24, 0xFC	; 252
 658:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_goto_xy>
		lcd_puts("Press A to Start");
 65c:	88 e0       	ldi	r24, 0x08	; 8
 65e:	91 e0       	ldi	r25, 0x01	; 1
 660:	0e 94 09 01 	call	0x212	; 0x212 <lcd_puts>
	
	
		int16_t count_a = 0;
		char show_a[16];
		char c;
		int p = 0,q;
 664:	e1 2c       	mov	r14, r1
 666:	f1 2c       	mov	r15, r1
		lcd_goto_xy(-4,3);
		lcd_puts("Press A to Start");
		
		while(1){
			
			c = numberpressed();
 668:	0e 94 28 01 	call	0x250	; 0x250 <numberpressed>
			
			if(c == 'a'){
 66c:	81 36       	cpi	r24, 0x61	; 97
 66e:	11 f4       	brne	.+4      	; 0x674 <main+0x7a>
				displayMenu();
 670:	0e 94 e6 01 	call	0x3cc	; 0x3cc <displayMenu>
				break;
			}
			
			if((p + 16) < l){
 674:	c7 01       	movw	r24, r14
 676:	40 96       	adiw	r24, 0x10	; 16
 678:	42 97       	sbiw	r24, 0x12	; 18
 67a:	a4 f4       	brge	.+40     	; 0x6a4 <main+0xaa>
 67c:	87 01       	movw	r16, r14
 67e:	01 52       	subi	r16, 0x21	; 33
 680:	1f 4f       	sbci	r17, 0xFF	; 255
 682:	c0 e0       	ldi	r28, 0x00	; 0
				for(q=0;q<16;q++){
					lcd_goto_xy(q,1);
 684:	61 e0       	ldi	r22, 0x01	; 1
 686:	8c 2f       	mov	r24, r28
 688:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_goto_xy>
					lcd_putc(msg[q+p]);
 68c:	f8 01       	movw	r30, r16
 68e:	81 91       	ld	r24, Z+
 690:	8f 01       	movw	r16, r30
 692:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_putc>
 696:	cf 5f       	subi	r28, 0xFF	; 255
				displayMenu();
				break;
			}
			
			if((p + 16) < l){
				for(q=0;q<16;q++){
 698:	c0 31       	cpi	r28, 0x10	; 16
 69a:	a1 f7       	brne	.-24     	; 0x684 <main+0x8a>
					lcd_goto_xy(q,1);
					lcd_putc(msg[q+p]);
				}
				++p;
 69c:	ff ef       	ldi	r31, 0xFF	; 255
 69e:	ef 1a       	sub	r14, r31
 6a0:	ff 0a       	sbc	r15, r31
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <main+0xae>
				}else{
				p = 0;
 6a4:	e1 2c       	mov	r14, r1
 6a6:	f1 2c       	mov	r15, r1
 6a8:	87 e8       	ldi	r24, 0x87	; 135
 6aa:	93 e1       	ldi	r25, 0x13	; 19
 6ac:	01 97       	sbiw	r24, 0x01	; 1
 6ae:	f1 f7       	brne	.-4      	; 0x6ac <main+0xb2>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <main+0xb8>
 6b2:	00 00       	nop
 6b4:	d9 cf       	rjmp	.-78     	; 0x668 <main+0x6e>

000006b6 <__vector_1>:
	return 'N';
}


ISR(INT0_vect)
{
 6b6:	1f 92       	push	r1
 6b8:	0f 92       	push	r0
 6ba:	0f b6       	in	r0, 0x3f	; 63
 6bc:	0f 92       	push	r0
 6be:	11 24       	eor	r1, r1
 6c0:	8f 93       	push	r24
 6c2:	9f 93       	push	r25
  if(i == 1)
 6c4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <i>
 6c8:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <i+0x1>
 6cc:	01 97       	sbiw	r24, 0x01	; 1
 6ce:	69 f4       	brne	.+26     	; 0x6ea <__vector_1+0x34>
  {
    TCCR1B = 0;
 6d0:	1e bc       	out	0x2e, r1	; 46
    pulse = TCNT1;
 6d2:	8c b5       	in	r24, 0x2c	; 44
 6d4:	9d b5       	in	r25, 0x2d	; 45
 6d6:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <pulse+0x1>
 6da:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <pulse>
    TCNT1 = 0;
 6de:	1d bc       	out	0x2d, r1	; 45
 6e0:	1c bc       	out	0x2c, r1	; 44
    i = 0;
 6e2:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <i+0x1>
 6e6:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <i>
  }

  if(i==0)
 6ea:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <i>
 6ee:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <i+0x1>
 6f2:	89 2b       	or	r24, r25
 6f4:	49 f4       	brne	.+18     	; 0x708 <__vector_1+0x52>
  {
    TCCR1B |= 1<<CS10;
 6f6:	8e b5       	in	r24, 0x2e	; 46
 6f8:	81 60       	ori	r24, 0x01	; 1
 6fa:	8e bd       	out	0x2e, r24	; 46
    i = 1;
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <i+0x1>
 704:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <i>
  }
}
 708:	9f 91       	pop	r25
 70a:	8f 91       	pop	r24
 70c:	0f 90       	pop	r0
 70e:	0f be       	out	0x3f, r0	; 63
 710:	0f 90       	pop	r0
 712:	1f 90       	pop	r1
 714:	18 95       	reti

00000716 <i2c_start>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 716:	94 ea       	ldi	r25, 0xA4	; 164
 718:	96 bf       	out	0x36, r25	; 54
 71a:	06 b6       	in	r0, 0x36	; 54
 71c:	07 fe       	sbrs	r0, 7
 71e:	fd cf       	rjmp	.-6      	; 0x71a <i2c_start+0x4>
 720:	91 b1       	in	r25, 0x01	; 1
 722:	98 7f       	andi	r25, 0xF8	; 248
 724:	98 30       	cpi	r25, 0x08	; 8
 726:	11 f0       	breq	.+4      	; 0x72c <i2c_start+0x16>
 728:	90 31       	cpi	r25, 0x10	; 16
 72a:	79 f4       	brne	.+30     	; 0x74a <i2c_start+0x34>
 72c:	83 b9       	out	0x03, r24	; 3
 72e:	84 e8       	ldi	r24, 0x84	; 132
 730:	86 bf       	out	0x36, r24	; 54
 732:	06 b6       	in	r0, 0x36	; 54
 734:	07 fe       	sbrs	r0, 7
 736:	fd cf       	rjmp	.-6      	; 0x732 <i2c_start+0x1c>
 738:	91 b1       	in	r25, 0x01	; 1
 73a:	98 7f       	andi	r25, 0xF8	; 248
 73c:	98 31       	cpi	r25, 0x18	; 24
 73e:	39 f0       	breq	.+14     	; 0x74e <i2c_start+0x38>
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	90 34       	cpi	r25, 0x40	; 64
 744:	29 f4       	brne	.+10     	; 0x750 <i2c_start+0x3a>
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	08 95       	ret
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	08 95       	ret
 74e:	80 e0       	ldi	r24, 0x00	; 0
 750:	08 95       	ret

00000752 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 752:	84 e9       	ldi	r24, 0x94	; 148
 754:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 756:	06 b6       	in	r0, 0x36	; 54
 758:	04 fc       	sbrc	r0, 4
 75a:	fd cf       	rjmp	.-6      	; 0x756 <i2c_stop+0x4>

}/* i2c_stop */
 75c:	08 95       	ret

0000075e <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 75e:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 760:	84 e8       	ldi	r24, 0x84	; 132
 762:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 764:	06 b6       	in	r0, 0x36	; 54
 766:	07 fe       	sbrs	r0, 7
 768:	fd cf       	rjmp	.-6      	; 0x764 <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 76a:	91 b1       	in	r25, 0x01	; 1
 76c:	98 7f       	andi	r25, 0xF8	; 248
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	98 32       	cpi	r25, 0x28	; 40
 772:	09 f4       	brne	.+2      	; 0x776 <i2c_write+0x18>
 774:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 776:	08 95       	ret

00000778 <__divmodhi4>:
 778:	97 fb       	bst	r25, 7
 77a:	07 2e       	mov	r0, r23
 77c:	16 f4       	brtc	.+4      	; 0x782 <__divmodhi4+0xa>
 77e:	00 94       	com	r0
 780:	07 d0       	rcall	.+14     	; 0x790 <__divmodhi4_neg1>
 782:	77 fd       	sbrc	r23, 7
 784:	09 d0       	rcall	.+18     	; 0x798 <__divmodhi4_neg2>
 786:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__udivmodhi4>
 78a:	07 fc       	sbrc	r0, 7
 78c:	05 d0       	rcall	.+10     	; 0x798 <__divmodhi4_neg2>
 78e:	3e f4       	brtc	.+14     	; 0x79e <__divmodhi4_exit>

00000790 <__divmodhi4_neg1>:
 790:	90 95       	com	r25
 792:	81 95       	neg	r24
 794:	9f 4f       	sbci	r25, 0xFF	; 255
 796:	08 95       	ret

00000798 <__divmodhi4_neg2>:
 798:	70 95       	com	r23
 79a:	61 95       	neg	r22
 79c:	7f 4f       	sbci	r23, 0xFF	; 255

0000079e <__divmodhi4_exit>:
 79e:	08 95       	ret

000007a0 <__udivmodhi4>:
 7a0:	aa 1b       	sub	r26, r26
 7a2:	bb 1b       	sub	r27, r27
 7a4:	51 e1       	ldi	r21, 0x11	; 17
 7a6:	07 c0       	rjmp	.+14     	; 0x7b6 <__udivmodhi4_ep>

000007a8 <__udivmodhi4_loop>:
 7a8:	aa 1f       	adc	r26, r26
 7aa:	bb 1f       	adc	r27, r27
 7ac:	a6 17       	cp	r26, r22
 7ae:	b7 07       	cpc	r27, r23
 7b0:	10 f0       	brcs	.+4      	; 0x7b6 <__udivmodhi4_ep>
 7b2:	a6 1b       	sub	r26, r22
 7b4:	b7 0b       	sbc	r27, r23

000007b6 <__udivmodhi4_ep>:
 7b6:	88 1f       	adc	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	5a 95       	dec	r21
 7bc:	a9 f7       	brne	.-22     	; 0x7a8 <__udivmodhi4_loop>
 7be:	80 95       	com	r24
 7c0:	90 95       	com	r25
 7c2:	bc 01       	movw	r22, r24
 7c4:	cd 01       	movw	r24, r26
 7c6:	08 95       	ret

000007c8 <atoi>:
 7c8:	fc 01       	movw	r30, r24
 7ca:	88 27       	eor	r24, r24
 7cc:	99 27       	eor	r25, r25
 7ce:	e8 94       	clt
 7d0:	21 91       	ld	r18, Z+
 7d2:	20 32       	cpi	r18, 0x20	; 32
 7d4:	e9 f3       	breq	.-6      	; 0x7d0 <atoi+0x8>
 7d6:	29 30       	cpi	r18, 0x09	; 9
 7d8:	10 f0       	brcs	.+4      	; 0x7de <atoi+0x16>
 7da:	2e 30       	cpi	r18, 0x0E	; 14
 7dc:	c8 f3       	brcs	.-14     	; 0x7d0 <atoi+0x8>
 7de:	2b 32       	cpi	r18, 0x2B	; 43
 7e0:	41 f0       	breq	.+16     	; 0x7f2 <atoi+0x2a>
 7e2:	2d 32       	cpi	r18, 0x2D	; 45
 7e4:	39 f4       	brne	.+14     	; 0x7f4 <atoi+0x2c>
 7e6:	68 94       	set
 7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <atoi+0x2a>
 7ea:	0e 94 0d 04 	call	0x81a	; 0x81a <__mulhi_const_10>
 7ee:	82 0f       	add	r24, r18
 7f0:	91 1d       	adc	r25, r1
 7f2:	21 91       	ld	r18, Z+
 7f4:	20 53       	subi	r18, 0x30	; 48
 7f6:	2a 30       	cpi	r18, 0x0A	; 10
 7f8:	c0 f3       	brcs	.-16     	; 0x7ea <atoi+0x22>
 7fa:	1e f4       	brtc	.+6      	; 0x802 <atoi+0x3a>
 7fc:	90 95       	com	r25
 7fe:	81 95       	neg	r24
 800:	9f 4f       	sbci	r25, 0xFF	; 255
 802:	08 95       	ret

00000804 <__itoa_ncheck>:
 804:	bb 27       	eor	r27, r27
 806:	4a 30       	cpi	r20, 0x0A	; 10
 808:	31 f4       	brne	.+12     	; 0x816 <__itoa_ncheck+0x12>
 80a:	99 23       	and	r25, r25
 80c:	22 f4       	brpl	.+8      	; 0x816 <__itoa_ncheck+0x12>
 80e:	bd e2       	ldi	r27, 0x2D	; 45
 810:	90 95       	com	r25
 812:	81 95       	neg	r24
 814:	9f 4f       	sbci	r25, 0xFF	; 255
 816:	0c 94 16 04 	jmp	0x82c	; 0x82c <__utoa_common>

0000081a <__mulhi_const_10>:
 81a:	7a e0       	ldi	r23, 0x0A	; 10
 81c:	97 9f       	mul	r25, r23
 81e:	90 2d       	mov	r25, r0
 820:	87 9f       	mul	r24, r23
 822:	80 2d       	mov	r24, r0
 824:	91 0d       	add	r25, r1
 826:	11 24       	eor	r1, r1
 828:	08 95       	ret

0000082a <__utoa_ncheck>:
 82a:	bb 27       	eor	r27, r27

0000082c <__utoa_common>:
 82c:	fb 01       	movw	r30, r22
 82e:	55 27       	eor	r21, r21
 830:	aa 27       	eor	r26, r26
 832:	88 0f       	add	r24, r24
 834:	99 1f       	adc	r25, r25
 836:	aa 1f       	adc	r26, r26
 838:	a4 17       	cp	r26, r20
 83a:	10 f0       	brcs	.+4      	; 0x840 <__utoa_common+0x14>
 83c:	a4 1b       	sub	r26, r20
 83e:	83 95       	inc	r24
 840:	50 51       	subi	r21, 0x10	; 16
 842:	b9 f7       	brne	.-18     	; 0x832 <__utoa_common+0x6>
 844:	a0 5d       	subi	r26, 0xD0	; 208
 846:	aa 33       	cpi	r26, 0x3A	; 58
 848:	08 f0       	brcs	.+2      	; 0x84c <__utoa_common+0x20>
 84a:	a9 5d       	subi	r26, 0xD9	; 217
 84c:	a1 93       	st	Z+, r26
 84e:	00 97       	sbiw	r24, 0x00	; 0
 850:	79 f7       	brne	.-34     	; 0x830 <__utoa_common+0x4>
 852:	b1 11       	cpse	r27, r1
 854:	b1 93       	st	Z+, r27
 856:	11 92       	st	Z+, r1
 858:	cb 01       	movw	r24, r22
 85a:	0c 94 2f 04 	jmp	0x85e	; 0x85e <strrev>

0000085e <strrev>:
 85e:	dc 01       	movw	r26, r24
 860:	fc 01       	movw	r30, r24
 862:	67 2f       	mov	r22, r23
 864:	71 91       	ld	r23, Z+
 866:	77 23       	and	r23, r23
 868:	e1 f7       	brne	.-8      	; 0x862 <__stack+0x3>
 86a:	32 97       	sbiw	r30, 0x02	; 2
 86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
 86e:	7c 91       	ld	r23, X
 870:	6d 93       	st	X+, r22
 872:	70 83       	st	Z, r23
 874:	62 91       	ld	r22, -Z
 876:	ae 17       	cp	r26, r30
 878:	bf 07       	cpc	r27, r31
 87a:	c8 f3       	brcs	.-14     	; 0x86e <__stack+0xf>
 87c:	08 95       	ret

0000087e <_exit>:
 87e:	f8 94       	cli

00000880 <__stop_program>:
 880:	ff cf       	rjmp	.-2      	; 0x880 <__stop_program>
